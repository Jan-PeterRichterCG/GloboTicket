using GloboTicket.TicketManagement.Api;
using GloboTicket.TicketManagement.API.IntegrationTests.Base;
using GloboTicket.TicketManagement.Application.Models.Authentication;
using System.Net.Http;
using Newtonsoft.Json;
using System.Threading.Tasks;
using Xunit;

namespace GloboTicket.TicketManagement.API.IntegrationTests.Controllers
{

    public class AccountControllerTests : IClassFixture<CustomWebApplicationFactory<Startup>>
    {
        private readonly CustomWebApplicationFactory<Startup> _factory;

        public AccountControllerTests(CustomWebApplicationFactory<Startup> factory)
        {
            _factory = factory;
        }

        [Fact]
        public async Task UnsuccessfulLogin()
        {
            var client = _factory.GetAnonymousClient();

            var authenticationRequest = new AuthenticationRequest();
            authenticationRequest.Email = "foo@bar.com"; 
            authenticationRequest.Password = "123456";

            var request = JsonConvert.SerializeObject(authenticationRequest);

            var response = await client.PostAsync("/api/account/authenticate", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            Assert.Equal(System.Net.HttpStatusCode.BadRequest, response.StatusCode);

            var responseString = await response.Content.ReadAsStringAsync();

            Assert.Equal("{\"error\":\"User with foo@bar.com not found.\"}", responseString);
        }

        [Fact]
        public async Task SuccessfulLogin()
        {
            var client = _factory.GetAnonymousClient();

            var authenticationRequest = new AuthenticationRequest();
            authenticationRequest.Email = "john@test.com"; 
            authenticationRequest.Password = "Plural&01?";

            var request = JsonConvert.SerializeObject(authenticationRequest);

            var response = await client.PostAsync("/api/account/authenticate", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();
            var authenticationResponse = JsonConvert.DeserializeObject<AuthenticationResponse>(responseString);

            Assert.Equal("971f85c6-2c75-4665-8cd4-c122566f6823",authenticationResponse.Id);
            Assert.Equal("johnsmith", authenticationResponse.UserName);
            Assert.Equal("john@test.com", authenticationResponse.Email);
            Assert.NotEmpty(authenticationResponse.Token);
        }

        // Note: Integration tests are currently run against an InMemoryDB with respect to ordinary entities like Event or Category ony. 
        // All the identity-related data is stored in the SQL database. The following test case creates a new user account for GloboTicket
        // in the database. In case of failures after phase I of the test, the SQL database is cluttered with test data generated by this test case.
        // Todo: Change the general solution architecture in order to use InMemory Database for identity data during tests
        [Fact]
        public async Task SuccessfulRegisterAndUnregister()
        {
            var client = _factory.GetAnonymousClient();

            // phase I: register new GloboTicket user
            var registrationRequest = new RegistrationRequest();
            var unique = System.DateTime.Now.Ticks.ToString();
            registrationRequest.FirstName = "Victoria"; 
            registrationRequest.LastName = "Queen";
            registrationRequest.UserName = "queenvictoria"+unique;
            registrationRequest.Email = unique+"@royal.uk"; 
            registrationRequest.Password = "Pr1nce@lbert";

            var request = JsonConvert.SerializeObject(registrationRequest);

            var response = await client.PostAsync("/api/account/register", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();
            var registrationResponse = JsonConvert.DeserializeObject<RegistrationResponse>(responseString);

            Assert.NotEmpty(registrationResponse.UserId);

            // phase II: check if login with the newly created user is possible

            var authenticationRequest = new AuthenticationRequest();
            authenticationRequest.Email = registrationRequest.Email; 
            authenticationRequest.Password = registrationRequest.Password ;

            request = JsonConvert.SerializeObject(authenticationRequest);

            response = await client.PostAsync("/api/account/authenticate", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            response.EnsureSuccessStatusCode();

            responseString = await response.Content.ReadAsStringAsync();
            var authenticationResponse = JsonConvert.DeserializeObject<AuthenticationResponse>(responseString);

            Assert.Equal(registrationRequest.UserName, authenticationResponse.UserName);
            Assert.Equal(registrationRequest.Email, authenticationResponse.Email);
            Assert.NotEmpty(authenticationResponse.Token);

            // phase III: unregister the GloboTicket user

            var unregistrationRequest = new UnregistrationRequest();
            unregistrationRequest.UserName = registrationRequest.UserName;

            request = JsonConvert.SerializeObject(registrationRequest);

            response = await client.PostAsync("/api/account/unregister", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            response.EnsureSuccessStatusCode();

            // phase IV: check if login is now impossible

            var newclient = _factory.GetAnonymousClient();

            authenticationRequest = new AuthenticationRequest();
            authenticationRequest.Email = registrationRequest.Email; 
            authenticationRequest.Password = registrationRequest.Password;

            request = JsonConvert.SerializeObject(authenticationRequest);

            response = await newclient.PostAsync("/api/account/authenticate", new StringContent(request, System.Text.Encoding.UTF8, "application/json"));

            Assert.Equal(System.Net.HttpStatusCode.BadRequest, response.StatusCode);

            responseString = await response.Content.ReadAsStringAsync();

            Assert.Equal("{\"error\":\"User with "+authenticationRequest.Email+ " not found.\"}", responseString);

        }

    }
}
